/*
Package example GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package example

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}

func (v Client) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Endpoint":
			return []string{}, true
		case "NewError":
			return []string{}, true
		case "HttpTransports":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Cookie) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.CookieParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v CookieParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Token":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v CreateOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.CreateOrgParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v CreateOrgParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.OrgInfo, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v DeleteOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.DeleteOrgParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v DeleteOrgParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgName":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v GetFile) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.GetFileParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v GetFileParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Path":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v GetOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.GetOrgParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v GetOrgParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgName":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v GetStoreBlob) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.GetStoreBlobParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v GetStoreBlobParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Scope":
			return []string{}, true
		case "Digest":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v ListOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.ListOrgParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v ListOrgOld) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}

		return nil, false
	}
	return []string{}, true
}

func (v ListOrgParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgId":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (Time) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v UploadBlob) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.UploadBlobParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v UploadBlobParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.IoReadCloser, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v UploadStoreBlob) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}
		if doc, ok := runtimeDoc(v.UploadStoreBlobParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v UploadStoreBlobParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Scope":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.IoReadCloser, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}
