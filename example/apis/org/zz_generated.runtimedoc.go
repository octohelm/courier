/*
Package org GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package org

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Cookie) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Token":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v CreateOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Info":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Info, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"创建组织",
	}, true
}

func (v DataList[T]) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Data":
			return []string{}, true
		case "Total":
			return []string{}, true
		case "Extra":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v DeleteOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgName":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"删除组织",
	}, true
}

func (v Detail) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Info":
			return []string{}, true
		case "CreatedAt":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Info, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v ErrNotFound) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgName":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v GetOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "OrgName":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"查询组织信息",
	}, true
}

func (v Info) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{
				"组织名称",
			}, true
		case "Type":
			return []string{
				"组织类型",
			}, true

		}

		return nil, false
	}
	return []string{
		"组织详情",
	}, true
}

func (v ListOrg) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}

		return nil, false
	}
	return []string{
		"拉取组织列表",
	}, true
}

func (v ListOrgOld) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {

		}

		return nil, false
	}
	return []string{
		"拉取组织列表",
	}, true
}

func (Type) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
