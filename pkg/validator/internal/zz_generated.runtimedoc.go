/*
Package internal GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package internal

import _ "embed"

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}

func (v *Any) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Validator":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Array) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Validator":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Pointer) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Validator":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Primitive) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "String":
			return []string{}, true
		case "Validator":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *Record) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Validator":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Struct) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Validator":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ValidatorOption) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Type":
			return []string{}, true
		case "Rule":
			return []string{}, true
		case "String":
			return []string{}, true
		case "Optional":
			return []string{}, true
		case "DefaultValue":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *Value) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Validator":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}
