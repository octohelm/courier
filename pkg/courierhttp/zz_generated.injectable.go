/*
Package courierhttp GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package courierhttp

import (
	context "context"
)

type contextOperationInfo struct{}

func OperationInfoFromContext(ctx context.Context) (*OperationInfo, bool) {
	if v, ok := ctx.Value(contextOperationInfo{}).(*OperationInfo); ok {
		return v, true
	}
	return nil, false
}

func OperationInfoInjectContext(ctx context.Context, tpe *OperationInfo) context.Context {
	return context.WithValue(ctx, contextOperationInfo{}, tpe)
}

func (p *OperationInfo) InjectContext(ctx context.Context) context.Context {
	return OperationInfoInjectContext(ctx, p)
}

func (v *OperationInfo) Init(ctx context.Context) error {
	return nil
}

type contextRequest struct{}

func RequestFromContext(ctx context.Context) (*Request, bool) {
	if v, ok := ctx.Value(contextRequest{}).(*Request); ok {
		return v, true
	}
	return nil, false
}

func RequestInjectContext(ctx context.Context, tpe *Request) context.Context {
	return context.WithValue(ctx, contextRequest{}, tpe)
}

type contextRouteDescriber struct{}

func RouteDescriberFromContext(ctx context.Context) (RouteDescriber, bool) {
	if v, ok := ctx.Value(contextRouteDescriber{}).(RouteDescriber); ok {
		return v, true
	}
	return nil, false
}

func RouteDescriberInjectContext(ctx context.Context, tpe RouteDescriber) context.Context {
	return context.WithValue(ctx, contextRouteDescriber{}, tpe)
}
